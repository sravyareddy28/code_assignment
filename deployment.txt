Here's a high-level overview of my approach:

    Deploy API:
        * AWS Elastic Beanstalk to deploy the API, which is a fully managed service that makes it easy to run and deploy web applications.
        * configuring the environment to use a web server like Nginx or Apache and a runtime like Python.

    Deploy Database:
        * Will use one of the available database on Amazon RDS.
        * I would select the database engine that best fits my application's requirements, such as PostgreSQL, MySQL, or Amazon Aurora.

    Schedule Data Ingestion:
        * Based on the data size the and required processing time will design and deploy the service. If the process time will be less than 15 minutes, will deploy lambda.
        * if the process require more time and power will deploy the AWS Glue.
        * Either lambda or Glue service will be responsible for ingesting data from the source from the services and storing it in the Amazon RDS database.

    Monitor and Logging:
        * I would use Amazon CloudWatch to monitor the API, Lambda function, Glue and database.
        * I would configure CloudWatch Logs to capture logs from the API, Lambda function, and database to help with troubleshooting and debugging.

By using these AWS services, I can deploy my code in the cloud and have a scalable, reliable, and highly available solution for my API, database, and data ingestion.